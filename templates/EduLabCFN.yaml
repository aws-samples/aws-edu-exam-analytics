AWSTemplateFormatVersion: 2010-09-09
Description: Stack to create Service Foundation for Education Data Analytics
Parameters:
  BucketNameData:
    Description: The S3 bucket name to upload edu data
    Type: String
    Default: edu-bucket
  EducationDatabaseName:
    Description: Name of the database for Education tables
    Type: String
    Default: db_education
  BucketNameAthenaOutput:
    Description: The S3 bucket name for Athena query results
    Type: String
    Default: athena-output-bucket
  BucketNameGlueJobs:
    Description: The S3 bucket name for Glue job files
    Type: String
    Default: glue-job-bucket
  GlueServiceRoleName:
    Description: The Service Role Name for Glue Crawler
    Type: String
    Default: AWSGlueServiceRole-Educ
Resources:
  AWSGlueServiceRoleEdu:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Ref GlueServiceRoleName
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
      Policies:
        - PolicyName: AllowBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Effect: Allow
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref s3DataBucket
                      - /data*
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - "sts:AssumeRole"
  s3DataBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketNameData
  s3AthenaBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketNameAthenaOutput
  s3GlueBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Ref BucketNameGlueJobs
  AthenaWorkGroupEdu:
    Type: "AWS::Athena::WorkGroup"
    Properties:
      Name: EduWorkGroup
      Description: WorkGroup for Athena
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: "false"
        ResultConfiguration:
          OutputLocation: !Sub "s3://${BucketNameAthenaOutput}/output/"
    DependsOn:
      - s3AthenaBucket
  EduDatabase:
    Type: "AWS::Glue::Database"
    Properties:
      DatabaseInput:
        Description: Education database
        Name: !Ref EducationDatabaseName
      CatalogId: !Ref "AWS::AccountId"
  EduCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      DatabaseName: !Ref EduDatabase
      Description: Education crawler
      Name: enem-crawler
      Role: !Ref AWSGlueServiceRoleEdu
      SchemaChangePolicy:
        DeleteBehavior: "DELETE_FROM_DATABASE"
        UpdateBehavior: "UPDATE_IN_DATABASE"
      Targets:
        S3Targets:
          - Path: !Sub
              - ${Bucket}/data
              - { Bucket: !Ref BucketNameData }
  NotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      InstanceType: ml.t2.medium
      DefaultCodeRepository: https://github.com/aws-samples/aws-edu-exam-analytics
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      VolumeSizeInGB: 50
  NotebookExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AWSGlueConsoleSageMakerNotebookFullAccess"
        - "arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: SageMakerS3AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - "s3:ListBucket"
                Effect: Allow
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref s3DataBucket
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:DeleteObject"
                Effect: Allow
                Resource:
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref s3DataBucket
                      - /*
                  - !Join
                    - ""
                    - - "arn:aws:s3:::"
                      - !Ref s3GlueBucket
                      - /*
  LambdaEnemRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  CreateCatalogLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Create/Update catalog on Glue. This function is called by AWS Step Functions"
      FunctionName: RunEnemCrawler
      Runtime: python3.8
      Role: !GetAtt LambdaEnemRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3

          print("Creating/Updating catalog")

          glue = boto3.client("glue")


          def create_update_tables(crawler):
              try:
                  glue.start_crawler(Name=crawler)
              except Exception as crawler_start_exception:
                  raise crawler_start_exception
              return


          def lambda_handler(event, context):
              crawler_name = event["Input"]["crawler"]

              try:
                  print("Creating/Updating tables")
                  create_update_tables(crawler_name)

                  print("Catalog setted")
                  catalog = {
                      "status": 200,
                  }
              except Exception as error:
                  print(error)
                  raise error

              return catalog
  CheckCatalogLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Check catalog status on Glue. This function is called by AWS Step Functions"
      FunctionName: CheckCrawlerStatus
      Runtime: python3.8
      Role: !GetAtt LambdaEnemRole.Arn
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import boto3

          print("Checking catalog")

          glue = boto3.client("glue")


          def lambda_handler(event, context):
              crawler_name = event["Input"]["crawler"]

              try:
                  crawler = glue.get_crawler(Name=crawler_name)
                  if crawler["Crawler"]["State"] != "READY":
                      status = 304
                  else:
                      status = 200
              except Exception as error:
                  print(error)
                  raise error
              return status
  OrchestrationEnemRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
  OrchestrationStepFunctions:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt OrchestrationEnemRole.Arn
      StateMachineName: EnemEtlStateMachine
      StateMachineType: STANDARD
      DefinitionString: !Sub
        - |-
          {
            "Comment": "ETL Workflow",
            "TimeoutSeconds": 1800,
            "StartAt": "Start Summary Job",
            "States": {
                "Start Summary Job": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::glue:startJobRun.sync",
                    "Parameters": {
                        "JobName": "GenerateSummaryData"
                    },
                    "Next": "Update Catalog"
                },
                "Update Catalog": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                        "FunctionName": "${CreateCatalogLambda}",
                        "Payload": {
                            "Input": {
                                "crawler": "enem-crawler"
                            }
                        }
                    },
                    "Next": "Wait Catalog"
                },
                "Wait Catalog": {
                    "Type": "Wait",
                    "Seconds": 30,
                    "Next": "Get Catalog Status"
                },
                "Get Catalog Status": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                        "FunctionName": "${CheckCatalogLambda}",
                        "Payload": {
                            "Input": {
                                "crawler": "enem-crawler"
                            }
                        }
                    },
                    "ResultPath": "$.CrawlerOutput",
                    "Next": "Catalog is updated?"
                },
                "Catalog is updated?": {
                    "Type": "Choice",
                    "Choices": [{
                            "Variable": "$.CrawlerOutput",
                            "NumericEquals": 304,
                            "Next": "Wait Catalog"
                        },
                        {
                            "Variable": "$.CrawlerOutput",
                            "NumericEquals": 200,
                            "Next": "Succeed"
                        }
                    ],
                    "Default": "Wait Catalog"
                },
                "Succeed": {
                    "Type": "Succeed"
                }
            }
          }
        - runcrawlerarn: !Ref CreateCatalogLambda
          checkcrawlerarn: !Ref CheckCatalogLambda
  SummaryJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SummaryJobRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
Outputs:
  BasicNotebookInstanceId:
    Description: Notebook instance for development
    Value: !Ref NotebookInstance
  DataBucket:
    Description: Bucket that stores Education Data
    Value: !Ref s3DataBucket
  GlueRole:
    Description: Name of IAM Service Role that will be used by Glue Crawler
    Value: !Ref AWSGlueServiceRoleEdu
  StepFunctionsMachine:
    Description: Step Functions state machine arn
    Value: !Ref OrchestrationStepFunctions
  GlueJob:
    Description: Glue Job name
    Value: !Ref SummaryJobRole
